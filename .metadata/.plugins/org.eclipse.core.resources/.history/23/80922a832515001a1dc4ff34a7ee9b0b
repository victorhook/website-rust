package inl3;

import java.awt.Color;
import java.util.ArrayList;

public class Test {

	public static void main(String[] args) {
		
	       ArrayList<Color> colors = new ArrayList<Color>();
	       for (int i = 0; i < 200; i++) {
	    	   colors.add(Color.getHSBColor(i/200, 1f, i/200));
	       }
	       
	       System.out.println(colors.toString());
	       

	}
	
	static String byteToHex(byte red, byte green, byte blue) {
		StringBuilder sb = new StringBuilder();
		sb.append(String.format("%02X", red));
		sb.append(String.format("%02X", green));
		sb.append(String.format("%02X", blue));
		return sb.toString();
	}

	private String doubleToHex(double nbr) {
		
        byte red = (byte) ((int) nbr >> 16);
        byte green = (byte) ((int) nbr >> 8);
        byte blue = (byte) nbr;
        
        StringBuilder sb = new StringBuilder();
        sb.append("#");
		sb.append(String.format("%02X", 127));
		sb.append(String.format("%02X", 127));
		sb.append(String.format("%02X", blue));
		return sb.toString();
		
	}
	/*
	for (int red = 0; red < 255; red += stepSize) {
 	   colors[index++] = new Color(red, 0, 0);													// 255 0 0
    }
    for (int green = 0; green < 255; green += stepSize) {
 	   colors[index++] = new Color(0, 0, green);												// 0 255 0
    }
    for (int blue = 0; blue < 255; blue += stepSize) {
 	   colors[index++] = new Color(0, 0, blue);	
 	   if (index >= Mandelbrot.MANTELBROT_ITERATIONS) {
 		   break;
 	   }		
    }
    /*
    for (int redAndGreen = 0; redAndGreen < 255; redAndGreen += stepSize) {
 	   colors[index++] = new Color(redAndGreen, 0, redAndGreen);								// 255 255 0
    }
    for (int RGB = 0; RGB < 255; RGB += stepSize) {
 	   colors[index++] = new Color(RGB, RGB, RGB);												// 255 255 255
    }
    
    for (int redAndBlue = 0; redAndBlue < 255; redAndBlue += stepSize) {
 	   colors[index++] = new Color(redAndBlue, 0, redAndBlue);									// 255 0 255	
    }

    for (int greenAndBlue = 0; greenAndBlue < 255; greenAndBlue += stepSize) {
 	   colors[index++] = new Color(0, greenAndBlue, greenAndBlue);								// 0 255 255	
 	   if (index >= Mandelbrot.MANTELBROT_ITERATIONS) {
 		   break;
 	   }
    }
    */
}
